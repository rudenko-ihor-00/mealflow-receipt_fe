import axios from "axios";
import { Ingredient } from "../../types";

const MEALFLOW_BASE_URL = ""; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –¥–ª—è —Ä–æ–±–æ—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å—ñ
const API_KEY = "mealflow-api-key-2025-secure";

// –°—Ç–≤–æ—Ä—é—î–º–æ axios —ñ–Ω—Å—Ç–∞–Ω—Å –∑ –±–∞–∑–æ–≤–æ—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
const mealflowApi = axios.create({
  baseURL: MEALFLOW_BASE_URL,
  headers: {
    "x-api-key": API_KEY,
    "Content-Type": "application/json",
  },
});

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π API
interface MappedProduct {
  id: string;
  name: string;
}

interface MapIngredientsResponse {
  products: MappedProduct[];
  metadata: {
    mapping_confidence: string;
    lang: string;
    mapped_count: number;
    total_count: number;
  };
}

interface FallbackAppResponse {
  stores: {
    store_link: string;
    deeplink: string | null;
    app_name: string;
    platform: string;
    is_partner: boolean;
    partner_priority: number;
    redirect_type: string;
  }[];
  platform: string;
  country: string;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–∞–ø—ñ–Ω–≥—É —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤
export const mapIngredients = async (
  ingredients: Ingredient[]
): Promise<MappedProduct[]> => {
  try {
    const requestBody = {
      language: "uk",
      source_app: "mealflow-cooking-app",
      ingredients: ingredients.map((ingredient) => ({
        name: ingredient.name.toLowerCase(),
        quantity: ingredient.amount,
        unit: ingredient.unit,
      })),
    };

    const response = await mealflowApi.post<MapIngredientsResponse>(
      "/api/v1/map-ingredients",
      requestBody
    );

    return response.data.products;
  } catch (error) {
    console.error("Error mapping ingredients:", error);
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏");
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞–≥–∞–∑–∏–Ω
export const getStoreLink = async (): Promise<string> => {
  try {
    console.log("üîç –û—Ç—Ä–∏–º—É—é store_link –∑ API...");
    const response = await mealflowApi.get<FallbackAppResponse>(
      "/api/v1/fallback-app?platform=web&country=UA"
    );
    console.log("üì° API –≤—ñ–¥–ø–æ–≤—ñ–¥—å:", response.data);
    
    // –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É - store_link –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ stores[0]
    if (!response.data.stores || !response.data.stores[0] || !response.data.stores[0].store_link) {
      console.error("‚ùå store_link –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ API –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ");
      throw new Error("store_link –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ API –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ");
    }
    
    const storeLink = response.data.stores[0].store_link;
    console.log("‚úÖ store_link –æ—Ç—Ä–∏–º–∞–Ω–æ:", storeLink);
    return storeLink;
  } catch (error) {
    console.error("üí• –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è store_link:", error);
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞–≥–∞–∑–∏–Ω");
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
export const generateOrderLink = async (
  ingredients: Ingredient[]
): Promise<string> => {
  try {
    console.log("üîç –§–æ—Ä–º—É—é –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è...");
    console.log("üì¶ –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:", ingredients);
    
    // –ú–∞–ø–∏–º–æ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏
    const mappedProducts = await mapIngredients(ingredients);
    console.log("üó∫Ô∏è –ú–∞–ø—ñ–Ω–≥ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤:", mappedProducts);

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞–≥–∞–∑–∏–Ω
    const storeLink = await getStoreLink();
    console.log("üè™ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞–≥–∞–∑–∏–Ω:", storeLink);

    // –§–æ—Ä–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è URL
    const productIds = mappedProducts.map((product) => product.id).join(",");
    const productTitles = mappedProducts
      .map((product) => product.name)
      .join(",");
    
    console.log("üÜî Product IDs:", productIds);
    console.log("üìù Product Titles:", productTitles);

    // –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    const orderLink = `${storeLink}?ids=${productIds}&titles=${encodeURIComponent(productTitles)}`;
    console.log("üîó –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:", orderLink);

    return orderLink;
  } catch (error) {
    console.error("üí• –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è:", error);
    throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è");
  }
};

export default mealflowApi;
